/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csia;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;

/**
 *
 * @author CorbynKwan
 */
public class CreateWorkerDialog extends javax.swing.JDialog implements ActionListener {

    private Manager manager;
    private ListOfWorkers list;

    /**
     * Creates new form CreateEmployeeDialog
     */
    public CreateWorkerDialog(java.awt.Frame parent, boolean modal, Manager m, ListOfWorkers l) {
        super(parent, modal);
        initComponents();
        this.manager = m;
        this.list = l;
        verifyCreateWorkerButton.addActionListener(this);
        backButton.addActionListener(this);

    }

    /**
     * if verifyCreateWorkerButton is clicked, requirements are processed
     * through if statements, and if not met error message shown if
     * verifyCreateWorkerButton is clicked, requirements are processed through
     * if statements, and if not met error message shown is clicked, window is
     * closed. 
     * if backButton is clicked, window is closed.
     * @param e The button clicked
     */
    public void actionPerformed(ActionEvent e) {

        if (e.getSource() == verifyCreateWorkerButton) {
            if (managerPasswordTextField.getText().equals(manager.getMasterpassword()) && !workerNameTextField.getText().isEmpty() && createWorkerCheckBox.isSelected()) {
                list.createWorker(workerNameTextField.getText());
                
                JOptionPane.showMessageDialog(this, "Successfully created worker");
            

            } else if (!managerPasswordTextField.getText().equals(manager.getMasterpassword()) && workerNameTextField.getText().isEmpty() && !createWorkerCheckBox.isSelected()) {
                JOptionPane.showMessageDialog(this, "Worker name was not inputted, Wrong password, Checkbox was not checked");

            } else if (!managerPasswordTextField.getText().equals(manager.getMasterpassword()) && workerNameTextField.getText().isEmpty() && createWorkerCheckBox.isSelected()) {
                JOptionPane.showMessageDialog(this, "Worker name was not inputted, Wrong password");

            } else if (managerPasswordTextField.getText().equals(manager.getMasterpassword()) && workerNameTextField.getText().isEmpty() && !createWorkerCheckBox.isSelected()) {
                JOptionPane.showMessageDialog(this, "Worker name was not inputted, Checkbox was not checked");

            } else if (!managerPasswordTextField.getText().equals(manager.getMasterpassword()) && !workerNameTextField.getText().isEmpty() && !createWorkerCheckBox.isSelected()) {
                JOptionPane.showMessageDialog(this, "Wrong password, Checkbox was not checked");

            } else if (managerPasswordTextField.getText().equals(manager.getMasterpassword()) && workerNameTextField.getText().isEmpty() && createWorkerCheckBox.isSelected()) {
                JOptionPane.showMessageDialog(this, "Worker name was not inputted");

            } else if (managerPasswordTextField.getText().equals(manager.getMasterpassword()) && !workerNameTextField.getText().isEmpty() && !createWorkerCheckBox.isSelected()) {
                JOptionPane.showMessageDialog(this, "Checkbox was not checked");

            } else if (!managerPasswordTextField.getText().equals(manager.getMasterpassword())) {
                JOptionPane.showMessageDialog(this, "Wrong password");
            
            }
        }
        if (e.getSource() == backButton) {
            this.setVisible(false);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        workerNameTextField = new javax.swing.JTextField();
        createWorkerCheckBox = new javax.swing.JCheckBox();
        verifyCreateWorkerButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        managerPasswordTextField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create Worker");

        jLabel1.setText("Create Worker");

        jLabel2.setText("Name of Worker:");

        createWorkerCheckBox.setText("I agree to create this worker");
        createWorkerCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createWorkerCheckBoxActionPerformed(evt);
            }
        });

        verifyCreateWorkerButton.setText("Create");

        jLabel3.setText("Manager Password:");

        backButton.setText("Back");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 17, Short.MAX_VALUE)
                .addComponent(createWorkerCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(verifyCreateWorkerButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backButton)
                .addGap(18, 18, 18))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(workerNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(managerPasswordTextField))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(workerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(managerPasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(verifyCreateWorkerButton)
                    .addComponent(createWorkerCheckBox))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createWorkerCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createWorkerCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_createWorkerCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JCheckBox createWorkerCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField managerPasswordTextField;
    private javax.swing.JButton verifyCreateWorkerButton;
    private javax.swing.JTextField workerNameTextField;
    // End of variables declaration//GEN-END:variables
}
